#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
package = ${package}

idAppli = ${parentArtifactId}

author = 

${symbol_pound} type de la base de données, parmi Oracle, H2, Mysql, Postgresql (plusieurs possibles, séparés par des virgules)
database.type = Oracle, H2

${symbol_pound} flag indiquant si la fetching strategy doit être générée dans l'application (générée par défaut)
${symbol_pound} 0 / false = not generated
${symbol_pound} 1 / true = generated
${symbol_pound} default = true
fetchingstrategy.enabled = false

${symbol_pound} flag indiquant si les annotations ejb doivent être générées dans l'application (générées par défaut)
${symbol_pound} 0 / false = not generated
${symbol_pound} 1 / true = generated
${symbol_pound} default = true
ejbservice.enabled = true

${symbol_pound} flag indiquant si le log4j.properties doit être généré dans l'application (généré par défaut)
log4j.enabled = false

${symbol_pound} 0 = not generated
${symbol_pound} 1 = generated
${symbol_pound} default = 0
${symbol_pound}requirement.generate.structure = 1
${symbol_pound}nombre entier indiquant le niveau de base de génération de classes pour les requirement
${symbol_pound} niveau 0 = Une seule classe contenant les requirement, le niveau de base étant "System"
${symbol_pound} default = 0
${symbol_pound}requirement.category.base.level = 0

commons.project = ${parentArtifactId}-commons
commons.source.dir = src/main/java
commons.test.dir = src/test/java
commons.test.resources.dir = src/test/resources

server.project = ${parentArtifactId}-server
server.source.dir = src/main/java
server.resources.dir = src/main/resources
server.test.dir = src/test/java
server.sql.dir = src/main/sql

${symbol_pound} prefix des attributs lors d'une affectation (this. ou rien)
affectationPrefix = 

${symbol_pound}-------------------------------------------------------------
${symbol_pound} Generated properties by Pacman Tue Jul 24 16:16:07 CEST 2012
${symbol_pound} Le prefixe des listes
listPrefix = tab
${symbol_pound} Le prefixe des map
mapPrefix = map
${symbol_pound} dossier de génération des sources xmi serveur
server.xmi.dir = src/main/xmi
${symbol_pound} dossier de génération des wsdl serveur
server.wsdl.dir = src/main/wsdl
${symbol_pound} Le nom d'un attribut par défaut
attributeDefault = _[CamelCaseIgnoreFirst/]
${symbol_pound} Le nom d'un attribut par défaut
attributeMultiple = _{${symbol_dollar}listPrefix}_[CamelCase.LowerFirst/]
${symbol_pound} Le nom d'attribut dans une affectation dans le constructeur
attributeAffectation = this.{${symbol_dollar}attributeDefault}
${symbol_pound} Le nom d'un attribut static
attributeStatic = [CamelCaseIgnoreFirst/]
${symbol_pound} Le nom d'un attribut final static
attributeFinalStatic = c_[CamelCaseIgnoreFirst/]
${symbol_pound} Le nom d'un attribut final
attributeFinal = {${symbol_dollar}attributeDefault}
${symbol_pound} Le nom d'une méthode par défaut
methodDefault = [CamelCase.LowerFirst/]
${symbol_pound} Le nom d'une méthode multiple
methodMultiple = [LanguageC/]
${symbol_pound} Le nom d'une méthode get
methodGet = get_[CamelCaseIgnoreFirst/]
${symbol_pound} Le nom d'une méthode set
methodSet = set_[CamelCaseIgnoreFirst/]
${symbol_pound} Le nom d'une méthode reset
methodReset = reset_[CamelCaseIgnoreFirst/]
${symbol_pound} La norme à appliquer pour une classe par défaut
classDefault = [CamelCase/]
${symbol_pound} La norme à appliquer pour une annotation Java
classAnnotation = [CamelCase/]
${symbol_pound} La norme à appliquer pour une classe abstraite
classAbstract = [CamelCase/]_Abs
${symbol_pound} La norme à appliquer pour une interface
classInterface = [CamelCase/]_Itf
${symbol_pound} La norme à appliquer pour une classe d'implementation
classImplem = [CamelCase/]
${symbol_pound} La norme à appliquer pour une enumeration
classEnum = [CamelCase/]_Enum
${symbol_pound} La norme à appliquer pour une classe de test
classTest = [CamelCase/]_Test
${symbol_pound} Le nom d'une variable final
variableFinal = v_[CamelCaseIgnoreFirst/]
${symbol_pound} Le nom d'une variable par défaut
variableDefault = v_[CamelCaseIgnoreFirst/]
${symbol_pound} Le nom d'une variable multiple par défaut
variableMultipleDefault = v_{${symbol_dollar}listPrefix}_[CamelCase.LowerFirst/]
${symbol_pound} Le nom d'une variable multiple par défaut
variableMultipleMap = v_{${symbol_dollar}mapPrefix}_[CamelCase.LowerFirst/]
${symbol_pound} Le nom d'une variable objet final
variableObjectFinal = v_[CamelCase/]
${symbol_pound} Le nom d'une variable par objet défaut
variableObjectDefault = v_[CamelCase/]
${symbol_pound} Le nom d'un paramètre IN classic
parameterMethodClassicIn = p_[CamelCase.LowerFirst/]
${symbol_pound} Le nom d'un paramètre Multiple
parameterMethodMultiple = p_{${symbol_dollar}listPrefix}_[CamelCase.LowerFirst/]
${symbol_pound} Le nom d'un paramètre Multiple
parameterMethodMultipleMap = p_{${symbol_dollar}mapPrefix}_[CamelCase.LowerFirst/]
${symbol_pound} Le nom d'un paramètre IN objet
parameterMethodObjectIn = p_[CamelCase.UpperFirst/]
${symbol_pound} Le nom d'un parametre OUT classique
parameterMethodClassicOut = p_[CamelCase.LowerFirst/]
${symbol_pound} Le nom d'un parametre OUT objet
parameterMethodObjectOut = p_[CamelCase.UpperFirst/]
${symbol_pound} Le nom d'un paramètre IN/OUT classique
parameterMethodClassicInOut = p_[CamelCase.LowerFirst/]
${symbol_pound} Le nom d'un paramètre IN/OUT objet
parameterMethodObjectInOut = p_[CamelCase.UpperFirst/]
${symbol_pound} Le nom d'un paramètre du méthode reset
parameterMethodReset = p_[CamelCase.LowerFirst/]
${symbol_pound} Le nom d'un paramètre d'un setter
parameterMethodSetter = p_[CamelCase.LowerFirst/]
${symbol_pound} Le nom du package de persistence
packagePersistence = persistence
${symbol_pound} Le nom du package d'implementation jdbc
packageImplemJdbc = impl_jdbc
${symbol_pound} Le nom du package d'api
packageApi = api
${symbol_pound} Le nom du package d'implementation server
packageImplemServer = impl_server
${symbol_pound} Le nom du package de matching
packageMatching = matching
${symbol_pound} Le nom du package du business
packageBusiness = business
${symbol_pound} Le nom du package de requirement
packageRequirement = requirement
${symbol_pound} flag indiquant si les tests unitaires sur le crud doivent être générés (générés par défaut)
tests.crud.enabled = true

${symbol_pound} Tablespace spécifique (si base Oracle)
server.sql.oracle.index.tablespace = 

${symbol_pound} L'interface ancetre des services avec CRUD
framework.type.Service_Itf = ${groupId}.business.Service
${symbol_pound} La classe ancetre des services avec CRUD
framework.type.Service_Abs = ${groupId}.business.AbstractService
${symbol_pound} La classe ancetre de tous les services
framework.type.ApplicationService_Itf = ${groupId}.business.ApplicationService
${symbol_pound} La classe ancetre de la factory des services
framework.type.UserBusiness_Abs = ${groupId}.business.UserBusiness_Abs
${symbol_pound} L'interface marquant un service comme ayant un cache
framework.type.ServiceReferentiel_Itf = ${groupId}.business.ServiceReferentiel
${symbol_pound} L'interface pour les enumerations des attributs
framework.type.AttributeNames_Itf = ${groupId}.business.dto.AttributesNames
${symbol_pound} L'interface des DTOs
framework.type.Dto_Itf = ${groupId}.business.dto.Dto
${symbol_pound} L'interface des Mappers (conversion DTO <-> XTO)
framework.type.Mapper_Itf = ${groupId}.mapper.Mapper
${symbol_pound} La classe ancetre des Mappers (conversion DTO <-> XTO)
framework.type.Mapper_Abs = ${groupId}.mapper.AbstractMapper
${symbol_pound} L'interface des Match (conversion Entity <-> DTO)
framework.type.Match_Itf = ${groupId}.matching.Match
${symbol_pound} La classe ancetre des Match (conversion Entity <-> DTO)
framework.type.Match_Abs = ${groupId}.matching.AbstractMatch
${symbol_pound} La classe ancetre de la factory des DAOs et Entities
framework.type.UserPersistence_Abs = ${groupId}.persistence.AbstractUserPersistence
${symbol_pound} L'interface des DAOs
framework.type.Dao_Itf = ${groupId}.persistence.dao.Dao
${symbol_pound} La classe ancetre des DAO JDBC
framework.type.DaoJdbc_Abs = ${groupId}.persistence.dao.jdbc.AbstractDaoJdbc
${symbol_pound} L'interface pour les enumerations des colonnes
framework.type.ColumnsNames_Itf = ${groupId}.persistence.entity.ColumnsNames
${symbol_pound} L'interface des Entities
framework.type.Entity_Itf = ${groupId}.persistence.entity.Entity
${symbol_pound} La classe ancetre des testeurs de beans
framework.type.BeanTester_Abs = ${groupId}.tua.BeanTester_Abs
${symbol_pound} La classe ancetre des testeurs de FetchingStrategy
framework.type.FetchingStrategyTester_Abs = ${groupId}.tua.AbstractFetchingStrategyTester
${symbol_pound} L'interface des XTOs
framework.type.Xto_Itf = ${groupId}.ws.xto.Xto
